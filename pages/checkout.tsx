// üìÅ pages/checkout.tsx
import Head from 'next/head';
import Navbar from '../components/Navbar';
import { useState, useEffect } from 'react';

export type Account = {
  bank: string;
  state: string;
  limit: number;
  age: string;
  price: number;
  submissionDate: string;
  type: string;
};

export default function CardsPage() {
  const [windowWidth, setWindowWidth] = useState(0);
  const [cardsData, setCardsData] = useState<Account[]>([]);
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    selectedAccounts: ''
  });

  const isMobile = windowWidth < 600;

  useEffect(() => {
    if (typeof window !== 'undefined') {
      setWindowWidth(window.innerWidth);
      const handleResize = () => setWindowWidth(window.innerWidth);
      window.addEventListener('resize', handleResize);
      return () => window.removeEventListener('resize', handleResize);
    }
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('https://opensheet.elk.sh/1sVp4rsHWCxCe3YaNsODwZrFfhU7NuZ2wialm1LKy5eU/1');
        const data = await response.json();
        const parsed = data.map((row: any, index: number) => ({
          bank: row['–ë–∞–Ω–∫'],
          state: row['–®—Ç–∞—Ç'],
          limit: parseInt(row['–õ–∏–º–∏—Ç'].replace(/[^\d]/g, '')),
          age: row['–í–æ–∑—Ä–∞—Å—Ç'],
          price: parseInt(row['–¶–µ–Ω–∞']),
          submissionDate: row['–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏'],
          type: row['–¢–∏–ø'],
          id: index + 1
        }));
        setCardsData(parsed);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      }
    };
    fetchData();
  }, []);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const formPayload = new URLSearchParams();
    formPayload.append('–ò–º—è', formData.firstName);
    formPayload.append('–§–∞–º–∏–ª–∏—è', formData.lastName);
    formPayload.append('Email', formData.email);
    formPayload.append('–¢–µ–ª–µ—Ñ–æ–Ω', formData.phone);
    formPayload.append('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã', formData.selectedAccounts);

    try {
      const response = await fetch('https://script.google.com/macros/s/AKfycbxUVnEFOtmp9HT7JAb1LWzbmsZ7ooJLtJGWYvgnemaK9b5J4vV_SmK6Z4Ka9her2V2Y/exec', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: formPayload.toString()
      });

      if (!response.ok) throw new Error('Network response was not ok');

      alert('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      setFormData({ firstName: '', lastName: '', email: '', phone: '', selectedAccounts: '' });
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  };

  const formatCurrency = (amount: number) => `$${amount.toLocaleString()}`;

  return (
    <div style={{ backgroundColor: '#2C3E50', minHeight: '100vh', color: '#fff', padding: isMobile ? '1rem' : '2rem' }}>
      <Head>
        <title>AU –ê–∫–∫–∞—É–Ω—Ç—ã | –ù–ê–® –ë–£–°–¢</title>
      </Head>

      <Navbar isMobile={isMobile} />

      <main style={{ maxWidth: 1200, margin: '0 auto', marginTop: isMobile ? '1rem' : '2rem' }}>
        <h1 style={{
          fontSize: isMobile ? '2rem' : '3rem',
          fontWeight: 900,
          color: '#C8B560',
          marginBottom: '2rem'
        }}>
          –î–æ—Å—Ç—É–ø–Ω—ã–µ AU –∞–∫–∫–∞—É–Ω—Ç—ã
        </h1>

        <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
          {cardsData.map((card, index) => (
            <div key={index} style={{
              backgroundColor: '#1A2633',
              borderRadius: 12,
              padding: '1rem 1.5rem',
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              flexWrap: 'wrap'
            }}>
              <div style={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
                <span style={{ fontWeight: 'bold', color: '#fff' }}>{card.bank}</span>
                <span style={{ color: '#C8B560' }}>
                  –®—Ç–∞—Ç: {card.state} | –õ–∏–º–∏—Ç: {formatCurrency(card.limit)} | –í–æ–∑—Ä–∞—Å—Ç: {card.age} | –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {card.submissionDate}
                </span>
              </div>
              <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                <span style={{ fontWeight: 'bold', fontSize: '1.2rem', color: '#C8B560' }}>{formatCurrency(card.price)}</span>
                <button style={{
                  backgroundColor: '#C8B560',
                  color: '#2C3E50',
                  padding: '0.6rem 1.2rem',
                  borderRadius: 8,
                  fontWeight: 'bold',
                  border: 'none',
                  cursor: 'pointer'
                }}>–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</button>
              </div>
            </div>
          ))}
        </div>

        <form onSubmit={handleSubmit} className="space-y-4" style={{ marginTop: '3rem', maxWidth: 600 }}>
          <input name="firstName" value={formData.firstName} onChange={handleChange} placeholder="–ò–º—è" className="w-full border p-2" />
          <input name="lastName" value={formData.lastName} onChange={handleChange} placeholder="–§–∞–º–∏–ª–∏—è" className="w-full border p-2" />
          <input name="email" value={formData.email} onChange={handleChange} placeholder="Email" className="w-full border p-2" />
          <input name="phone" value={formData.phone} onChange={handleChange} placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" className="w-full border p-2" />
          <textarea name="selectedAccounts" value={formData.selectedAccounts} onChange={handleChange} placeholder="–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã" className="w-full border p-2" />
          <button type="submit" className="bg-gold text-white py-2 px-4 rounded">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</button>
        </form>
      </main>
    </div>
  );
}
